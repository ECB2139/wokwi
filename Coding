#include <DHT.h>
#define DHTPIN 2       
#define DHTTYPE DHT22
#define RELAY_PIN 3    
DHT dht(DHTPIN, DHTTYPE);
float currentTemp = 0;
float targetTemp = 26.0;     
float maxTemp = 30.0;        
float hysteresis = 1.0;

enum SystemState {
  IDLE,
  HEATING,
  STABILIZING,
  TARGET_REACHED,
  OVERHEAT
};

SystemState state = IDLE;

void setup() {
  Serial.begin(9600);
  dht.begin();
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  state = IDLE;
  Serial.println("Heater Control System Initialized");
}

void loop() {
  currentTemp = dht.readTemperature();

  if (isnan(currentTemp)) {
    Serial.println("Failed to read from DHT sensor!");
    delay(2000);
    return;
  }

  switch (state) {
    case IDLE:
      if (currentTemp < targetTemp - hysteresis) {
        digitalWrite(RELAY_PIN, HIGH);
        state = HEATING;
      }
      break;

    case HEATING:
      if (currentTemp >= targetTemp) {
        digitalWrite(RELAY_PIN, LOW);
        state = STABILIZING;
      }
      break;

    case STABILIZING:
      if (currentTemp < targetTemp - hysteresis) {
        digitalWrite(RELAY_PIN, HIGH);
        state = HEATING;
      } else if (currentTemp >= targetTemp && currentTemp < maxTemp) {
        state = TARGET_REACHED;
      }
      break;

    case TARGET_REACHED:
      if (currentTemp > maxTemp) {
        digitalWrite(RELAY_PIN, LOW);
        state = OVERHEAT;
      } else if (currentTemp < targetTemp - hysteresis) {
        digitalWrite(RELAY_PIN, HIGH);
        state = HEATING;
      }
      break;

    case OVERHEAT:
      digitalWrite(RELAY_PIN, LOW);
      Serial.println("*** OVERHEAT! Heater disabled. ***");
      break;
  }

  Serial.print("Temp: ");
  Serial.print(currentTemp);
  Serial.print(" C | State: ");

  switch(state) {
    case IDLE: Serial.println("IDLE"); break;
    case HEATING: Serial.println("HEATING"); break;
    case STABILIZING: Serial.println("STABILIZING"); break;
    case TARGET_REACHED: Serial.println("TARGET REACHED"); break;
    case OVERHEAT: Serial.println("OVERHEAT"); break;
  }

  delay(2000);
}
